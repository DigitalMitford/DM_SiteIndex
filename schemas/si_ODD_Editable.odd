<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0"
   xmlns:xi="http://www.w3.org/2001/XInclude"
   xmlns:sch="http://purl.oclc.org/dsdl/schematron"
   xmlns:rng="http://relaxng.org/ns/structure/1.0"
   version="2.9.1"
   xml:lang="en">
   <!-- 2019-05-26 ebb: * Start in si_ODD_Editable.odd, and in oXygen, run Tools -> Canonicalize to expand the latest occupations code. When updating the <occupation> element and its associated schematron constraints, always do that first, over in ODD_includes directory here in this schema folder. -->
   <!-- 2018-08-11 ebb: * After generating si_ODD.odd, "Run the wrench" in oXygen (on the si_ODD.odd file) to generate the new Relax-NG XML-syntax project schema and HTML documentation for the project SI files.
  -->
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <title>Digital Mitford ODD for Site Index Files</title>
            <author>Elisa Beshero-Bondar</author>
         </titleStmt>
         <editionStmt xml:id="edition">
            <edition>First digital edition in TEI P5, prepared on <date when="2018-08-11">August 11, 2018</date> in Norwood, NY.</edition>
         </editionStmt>
         <publicationStmt>
            <authority>Prepared in TEI P5 by Elisa Beshero-Bondar in the Digital Mitford GitHub repository: <ref target="https://github.com/DigitalMitford/DM_SiteIndex"/>.
            </authority>
            <availability>
               <licence>Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) approved for Free Cultural Works <ref target="https://creativecommons.org/licenses/by-sa/4.0/"/>
               </licence>
            </availability>
         </publicationStmt>
         <seriesStmt>
            <p>This ODD customizes the TEI P5 for use in the prosopography index file known as our <q>Site Index</q>, which holds a narrower range of elements than in use in the wider project. It also customizes the TEI for all <q>SI-Add</q> files prepared as draft additional entries proposed for the published Site Index.</p>
         </seriesStmt>
         <sourceDesc>
            <p>Born digital, based on information presented in the Digital Mitford Codebook at <ref target="http://codebook.mitford.pitt.edu"/>
            </p>
         </sourceDesc>
      </fileDesc>
      <revisionDesc>
         <listChange>
            <change when="2022-08-17" who="#ebb">Updated ODD to add a new sortKey for historical editors, and updated quote-checking Schematron constraint to recognize curly quotes.</change>
            <change when="2018-08-11" who="#ebb">Prepared this ODD file while visiting Lisa Wilson in Norwood, NY.</change>
         </listChange>
      </revisionDesc>
   </teiHeader>
   <text>
      <body>
         <schemaSpec ident="siODD" start="TEI teiCorpus" prefix="tei">
            <moduleRef key="tei"/>
            <moduleRef key="core" except="add addrLine address analytic biblStruct binaryObject cb choice corr del distinct divGen gap gb hi imprint index lb measure measureGrp media monogr pb speaker stage unclear"/>
            <moduleRef key="header"/>
            <moduleRef key="namesdates"/>
            <moduleRef key="textstructure" except="div1 div2 div3 div4 div5 div6 div7 argument byline closer dateline docAuthor docDate docEdition docImprint docTitle epigraph floatingText group imprimatur opener postscript salute signed titlePage titlePart trailer"/>
            <moduleRef key="linking"/>
            <moduleRef key="figures" except="formula notatedMusic"/>         
            <constraintSpec scheme="schematron" ident="xmlIDs">
               <constraint>
                  <sch:rule context="tei:TEI//@xml:id">
                     <sch:report test="matches(., '\s+')" role="fatal">
                        @xml:id values may NOT contain white spaces!
                     </sch:report>        
                  </sch:rule>
               </constraint>
            </constraintSpec>
            <constraintSpec scheme="schematron" ident="refsReq">
               <constraint>
                  <sch:rule context="tei:note//tei:persName[not(@ref)] | tei:note//tei:rs[not(@ref)] | tei:note//tei:placeName[not(@ref)] | tei:note//tei:orgName[not(@ref)] | tei:note//tei:name[not(@ref)] | tei:note//tei:title[not(@ref)]">
                     <sch:let name="currentNode" value="."/>
                     <sch:let name="matchingEntry" value="$currentNode[ancestor::tei:text//tei:*[@xml:id][not(self::* eq $currentNode/ancestor::*[1][@xml:id])]][*[not(self::tei:note) and not(self::tei:birth) and not (self::tei:death)][contains(string(), $currentNode)]]/@xml:id"/>
                     <sch:report test="$matchingEntry" role="info">
                        This element (coded in a note) is missing an @ref attribute but may have a matching entry in the Site Index: Could it be this (or one of these)? <sch:value-of select="string-join($matchingEntry, ', ')"/>.
                     </sch:report>  
                  </sch:rule>
               </constraint>
            </constraintSpec>
          <!-- 2018-08-11 ebb: NOT WORKING! DEBUG. <constraintSpec scheme="schematron" ident="correspReq">
               <constraint>
                  <sch:rule context="tei:note//tei:bibl[not(@corresp)]">
                     <sch:let name="currentNode" value="."/>
                     <sch:let name="matchingEntry" value="$currentNode[ancestor::tei:text//tei:listBibl/tei:bibl[@xml:id][not(self::* eq $currentNode/ancestor::tei:bibl[1][@xml:id])]][*[not(self::tei:note)][contains(string(), $currentNode)]]/@xml:id"/>
                     <sch:assert test="@corresp">
                        The current bibl element (coded in a note) lacks an @corresp attribute, but may have a matching entry in the Site Index: Could it be this (or one of these)? <sch:value-of select="string-join($matchingEntry, ', ')"/>.  
                     </sch:assert>  
                  </sch:rule>
               </constraint>
            </constraintSpec>-->
            <constraintSpec scheme="schematron" ident="hashtaggery">
               <constraint>
                  <sch:rule context="tei:TEI//@ref | tei:TEI//@who | tei:TEI//@corresp | tei:TEI//@wit">
                     <sch:assert test="starts-with(., '#')" role="fatal">
                        Attributes @ref, @who, @corresp, and @wit must begin with a hashtag.
                     </sch:assert>  
                  </sch:rule>
               </constraint>
            </constraintSpec>
            <!--sortKey on SI list elements -->
<elementSpec ident="listPerson" module="namesdates" mode="change">
   <attList>
      <attDef ident="sortKey" mode="replace" usage="req">
         <valList type="closed">
            <valItem ident="Mitford_Team"/>
            <valItem ident="Past_Assistants"/>
            <valItem ident="Historical_Editors"/>
            <valItem ident="Past_Editors"/>
            <valItem ident="histPersons"/>
            <valItem ident="archPersons"/>
            <valItem ident="fictPersons"/>
         </valList>
      </attDef>
   </attList>
</elementSpec>
<elementSpec ident="listPlace" module="namesdates" mode="change">
     <attList>
         <attDef ident="sortKey" mode="replace" usage="req">
             <valList type="closed">
                 <valItem ident="histPlaces"/>
                 <valItem ident="fictPlaces"/>
              </valList>
           </attDef>
       </attList>
</elementSpec>
            <elementSpec ident="listOrg" module="namesdates" mode="change">
               <attList>
                  <attDef ident="sortKey" mode="replace" usage="req">
                     <valList type="closed">
                        <valItem ident="archives"/>
                        <valItem ident="histOrgs"/>
                        <valItem ident="fictOrgs"/>
                        <valItem ident="archOrgs"/>
                     </valList>
                  </attDef>
               </attList>
            </elementSpec>
            <elementSpec ident="listEvent" module="namesdates" mode="change">
               <attList>
                  <attDef ident="sortKey" mode="replace" usage="req">
                     <valList type="closed">
                        <valItem ident="histEvents"/>
                     </valList>
                  </attDef>
               </attList>
            </elementSpec>
            <elementSpec ident="listBibl" module="core" mode="change">
               <attList>
                  <attDef ident="sortKey" mode="replace" usage="req">
                     <valList type="closed">
                        <valItem ident="work_MRM"/>
                        <valItem ident="serial_MRM"/>
                        <valItem ident="schol"/>
                     </valList>
                  </attDef>
               </attList>
            </elementSpec> 
            <elementSpec ident="list" module="core" mode="change">
               <attList>
                  <attDef ident="sortKey" mode="replace" usage="req">
                     <valList type="closed">
                        <valItem ident="plants"/>
                        <valItem ident="animals"/>
                        <valItem ident="art"/>
                     </valList>
                  </attDef>
               </attList>
            </elementSpec> 
            
            <!--sex codes on person element: m, f, m f, and u -->           
            <elementSpec ident="person" module="namesdates" mode="change">
               <attList>
                  <attDef ident="sex" mode="replace" usage="rec">
                     <valList type="closed">
                        <valItem ident="m"><gloss>for persons identified as male.</gloss></valItem>
                        <valItem ident="f"><gloss>for persons identified as female.</gloss></valItem>
                        <valItem ident="m f"><gloss>for persons identified as of transitional or multiple sexual identities.</gloss></valItem>
                        <valItem ident="u"><gloss>for persons with unidentified or unknown sexual identity.</gloss></valItem>  
                     </valList>
                  </attDef>
               </attList>
            </elementSpec>
            <elementSpec ident="rs" module="core" mode="change">
               <attList>
                  <attDef ident="type" mode="replace" usage="req">
                     <valList type="closed">
                        <valItem ident="person">
                           <gloss>Use only when you need to disambiguate unnamed references to people. When there is a name, use the persName element.</gloss>
                        </valItem>
                        <valItem ident="org">
                           <gloss>Use only when you need to disambiguate unnamed references to organizations, families, collectives of people. When there is a name, use the orgName element.</gloss>
                        </valItem>
                        <valItem ident="place">
                           <gloss>Use only when you need to disambiguate unnamed references to places. When there is a name, use the placeName element.</gloss>
                        </valItem>
                        <valItem ident="event">
                           <gloss>Use only when you need to disambiguate unnamed references to events. When there is a name, use the name element with type="event".</gloss>
                        </valItem>
                        <valItem ident="letter">
                           <gloss>Use to mark references to correspondence.</gloss>
                        </valItem>
                        <valItem ident="plant">
                           <gloss>Use to mark references to plants by kind, variety, genus, and/or species. If you see a kind, variety, genus, and/or species name, use the &lt;name&gt; element (instead of &lt;rs&gt;) with type="plant".</gloss>
                        </valItem>
                        <valItem ident="animal">
                           <gloss>Use to mark references to animal types when they are unnamed by kind, variety, genus, and/or species. If you see a kind, variety, genus, and/or species name, use the name element with type="animal". </gloss>
                        </valItem>
                        <valItem ident="title">
                           <gloss>Use only where necessary to mark unnamed references to documents, readings, texts in the absence of a title. If this is a title, use the title element with an @ref. If there is mention of an author, date, or other bibliographic information all together, like Scott's Midlothian, use a bibl element with @corresp around the full span of referencing text, wrapping the parts as you can with author and title elements (no @ref attributes needed inside, just @corresp on the outer bibl) .</gloss>
                        </valItem>
                        <valItem ident="art">
                           <gloss>Use only where necessary to mark unnamed references to works of art in the absence of a title. If you have a title, use the title element with type="art".</gloss>
                        </valItem>
                     </valList>
                  </attDef>
               </attList>
            </elementSpec>
            <!--Occupation coding -->
            
            <!-- X-Include Here: for elementSpec occupation. Edit the occupation element specs in the ODD_Includes directory, and then run Canonicalize in oXygen to include it. -->
            <xi:include href="ODD_includes/occupationsElem.xml" parse="xml"/>
            <!--Occupation coding: binding appropriate subtypes with types and permitting plural subtype values. Edit the occupation Schematron constraint specs in the ODD_Includes directory, and then run Canonicalize in oXygen to include it. -->
         <!-- X-Include Here: for occupation Schematron constraints -->
            <xi:include href="ODD_includes/occupationsSchem.xml" parse="xml"/>
<!--Schematron Constraints for Catching Errors / Omissions in SI encoding -->
            <constraintSpec ident="quotes" scheme="schematron">
               <constraint>
                  <sch:rule context="tei:note//text()[matches(., '[A-z]+')]">
                     <sch:let name="straightDoubleQuote" value="'&quot;'"/>
                     <sch:let name="curlyDoubleQuote" value="'[“”]'"/>
                     <sch:report role="warning" test="matches(., $straightDoubleQuote) or matches(., $curlyDoubleQuote)">
                        We see you’re typing in quotation marks. Please use a meaningful TEI element for these, instead, and do not duplicate quotation marks with a TEI element, because this may result in multiple sets of quotation marks on the website. If this is a cited quotation, use the cit and quote elements together (or just the quote element for an uncited quotation). If it is a spoken aloud passage, use the said element. If it is a title of a poem or other short work, use &lt;title level="a"&gt;. If it is a string of words in quotation marks and you are not sure what it is, use the q element.</sch:report>        
                  </sch:rule>
               </constraint>
            </constraintSpec>
            <constraintSpec ident="SI_Guidance" scheme="schematron"><constraint>     
               <sch:pattern>
                  <sch:p>Look for strings in note elements and label elements that might want/need to be tagged for cross-referencing. </sch:p>
               </sch:pattern>
               <sch:pattern>
                  <sch:p>Identify stub entries.</sch:p>
                  <sch:rule context="*[@xml:id]">
                     <sch:report test="count(child::*) eq 1" role="warning">Warning: stub element. We should flesh this out and add more information.</sch:report>
                  </sch:rule>
               </sch:pattern>
               <sch:pattern>
                  <sch:rule context="tei:person[descendant::tei:surname = //tei:surname[not(ancestor::tei:person = self::tei:person)]]">
                     <sch:let name="currentContext" value="."/>
                     <sch:let name="sharedSurname" value="//tei:person[not(. = $currentContext)][descendant::tei:surname = $currentContext/descendant::tei:surname]"/>
                     <sch:report test="descendant::tei:forename = $sharedSurname//tei:forename" role="warning">
                        Warning! Is this a duplicate entry? The person represented in this entry shares a surname and a forename with one or more other entries: <sch:value-of select="string-join($sharedSurname[descendant::tei:forename = $currentContext//tei:forename]/@xml:id, ', ')"/>
                     </sch:report>
                  </sch:rule>
               </sch:pattern>
               <sch:pattern>
                  <sch:p>This rule will test the plausibilty of birth dates in relation to death dates.</sch:p>
                  <sch:rule context="tei:person[tei:birth/@*[matches(., '^\d')] and tei:death/@*[matches(., '^\d')]]">
                     <sch:assert test="tei:birth/@* &lt; tei:death/@*">Birth dates must be earlier than death dates.</sch:assert>
                  </sch:rule>
                  <sch:rule context="tei:person[tei:birth/@*[matches(., '^-')] and tei:death/@*[matches(., '^-')]]">
                     <sch:assert test="tei:birth/@* &gt; tei:death/@*">When dates begin with a minus sign (BCE), the value for the birth year must be a larger negative number than the death year. Birth dates must be earlier than death dates.</sch:assert>
                  </sch:rule>
                  <sch:rule context="tei:person[tei:death/@*[matches(., '^-')]]"><sch:report test="tei:birth/@*[matches(., '^\d')]">This birth date seems to be positive (ADE) while the death date is negative (BCE). Birth dates must be earlier than death dates.</sch:report>
                  </sch:rule>
                  <sch:rule context="tei:person[tei:birth/@*[matches(., '^-')]]">
                     <sch:report test="tei:death/@*[matches(., '^\d')] and tei:death/@*/number() &gt; 99">This birth date seems to be negative (BCE) while the death date is positive (ADE) and greater than 99, which seems an excessively long life span. Check if the dates are correct?</sch:report>
                  </sch:rule>
               </sch:pattern>
               <sch:pattern>
                  <sch:rule context="@sex">
                     <sch:report test="matches(., '[0-9,]')">
                        We are no longer using the ISO numerical codes for sex, and this attribute may not contain commas. Change this code to a letter, one (or more) of the following approved values: m, f, m f, and u. If indicating multiple values, separate each with just a white space.
                     </sch:report>
                     
                  </sch:rule>
                  
               </sch:pattern>
               
               
               <sch:pattern>
                  <sch:rule context="tei:text//@xml:id">
                     <sch:report test="matches(., '\s+')">
                        @xml:id values must not contain white spaces.
                     </sch:report>   
                     <sch:report test="starts-with(., '#')">
                        @xml:id values must not begin with a hashtag.
                     </sch:report>
                  </sch:rule>
               </sch:pattern>
               <sch:pattern>
                  <sch:rule context="tei:TEI"> 
                     <sch:assert test="count(distinct-values(//@sortKey)) eq count(//*[@sortKey])">
                        There must not be any duplicate @sortkey values in the site index! 
                     </sch:assert>
                  </sch:rule>  
               </sch:pattern>
               <sch:pattern>
                  <sch:let name="si" value="doc('http://digitalmitford.org/si.xml')//@xml:id"/> 
                  <!--<sch:let name="si" value="doc('../../si_Full_Staged/si-local.xml')//@xml:id"/>-->
                  <sch:let name="siAddcoll" value="collection('../si_Add_Staged/catalogue.xml')//@xml:id"/>
                  <sch:let name="siAll" value="($si, $siAddcoll)"/>
                  <sch:rule context="@ref | @corresp | @resp">
                     
                     <sch:let name="tokens" value="for $w in tokenize(., '\s+') return substring-after($w, '#')"/>
                     <sch:assert test="every $token in $tokens satisfies $token = //tei:text//@xml:id | $si">
                        Your @ref or @corresp value needs to begin with a hashtag. If that's not the problem, check that the attribute of @ref or @corresp (after the hashtag, #) matches a defined @xml:id in the site index or siAdd files. 
                     </sch:assert>                
                  </sch:rule>
               </sch:pattern>      
            </constraint>
            </constraintSpec>
            <constraintSpec ident="noteGuidance" scheme="schematron">
               <constraint>
                  <sch:pattern>
                     <sch:title>Multi-paragraph notes</sch:title>
                     <sch:rule context="tei:note">
                        <sch:report
                           test="count(descendant::tei:p) gt 1" role="info">This note is multiple paragraphs long, and may need to be trimmed. Should we consider condensing it?</sch:report>
                     </sch:rule>
                  </sch:pattern>
                  <sch:pattern>
                     <sch:title>Does the first paragraph contain a Mitford reference?</sch:title>
                     <sch:rule context="tei:note[count(descendant::tei:p) gt 1]//tei:p[1]">
                        <sch:assert test="contains(., 'Mitford')" role="warning">In this multi-paragraph note, the first paragraph needs to mention Mitford in some way to prioritize MRM’s relationship with this named entity.</sch:assert>
                     </sch:rule>
                  </sch:pattern>
                  <sch:pattern>
                     <sch:title>Mentions of birth and death</sch:title>
                     <sch:rule context="tei:note">
                        <sch:report test="contains(., 'was born') or contains(., ' [Bb]orn') or contains(., ' [Dd]ied')" role="info">We notice the phrase(s) “was born”, “born,” or “died” appear somewhere in this note. If these passages duplicate info in the birth or death elements elsewehere in this entry, they should be removed, since it will represent duplicate output on the site.</sch:report>
                     </sch:rule>
                  </sch:pattern>
               </constraint>
            </constraintSpec>
         </schemaSpec> 
      </body>
  </text>
</TEI>
